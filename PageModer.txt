<Page x:Class="IRPO.PageModer"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:IRPO"
   
      mc:Ignorable="d" 
      d:DesignHeight="500" d:DesignWidth="800"
      Title="Окно модератора" Background="White">

    <Grid>

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="50"/>
        </Grid.RowDefinitions>

        <StackPanel  Height="30"  Orientation="Horizontal">
            <TextBox x:Name="TB_Privet" Width="150" Height="30" TextAlignment="Right" Margin="200,0,0,0" FontSize="15" IsReadOnly="True" FontFamily="Comic Sans MS" BorderThickness="0"/>
            <TextBox x:Name="TB_Privet1" Width="300" Height="30" TextAlignment="Left" FontSize="15" IsReadOnly="True" FontFamily="Comic Sans MS" BorderThickness="0"/>
        </StackPanel>
        <Border
             Height="2"
             Background="#99ffff"                  
             Margin="200,30,150,0"/>

        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
            <TextBlock Text="Производитель:" VerticalAlignment="Center" Margin="0,0,5,0"/>
            <ComboBox x:Name="manufacturerComboBox" SelectionChanged="manufacturerComboBox_SelectionChanged"/>
            <CheckBox x:Name="sortByPriceCheckBox" Content="Сортировка по цене" Checked="sortByPriceCheckBox_Checked" Unchecked="sortByPriceCheckBox_Unchecked" Margin="10,0,0,0"/>
        </StackPanel>

        <TextBox x:Name="searchTextBox" Margin="10" TextChanged="searchTextBox_TextChanged" Grid.Row="2"/>
    
        <ListView x:Name="productsListView" Grid.Row="3" >
       <ListView.ItemTemplate>
           <DataTemplate>
               <Grid>
                   <Grid.ColumnDefinitions>
                       <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                   </Grid.ColumnDefinitions>
                   <Grid.RowDefinitions>
                       <RowDefinition Height="Auto"/>
                       <RowDefinition Height="*"/>
                   </Grid.RowDefinitions>
                 
                        <StackPanel Margin="10">
                            <TextBlock Text="Артикул" FontWeight="Bold" FontSize="16"/>

                            <TextBlock Text="{Binding ProductArticleNumber}" Margin="0,5,0,0"/>

                        </StackPanel>
                        <Image Grid.Column="1" Source="{Binding Изображение}" Width="100" Height="100" Margin="5"/>

                   <StackPanel Grid.Column="2" Margin="10">
                       <TextBlock Text="{Binding ProductName}" FontWeight="Bold" FontSize="16"/>
                       <TextBlock Text="{Binding ProductDescription}" Margin="0,5,0,0"/>
                       <TextBlock Text="{Binding ProductManufacturer}" Margin="0,5,0,0" Foreground="Gray"/>
                       <TextBlock Text="{Binding ProductCost, StringFormat='Цена: {0:C}'}" FontWeight="Bold" Margin="0,5,0,0"/>

                   </StackPanel>
                        <StackPanel Grid.Column="3" Margin="100,10,10,10">
                            <TextBlock Text="Наличие на складе" FontWeight="Bold" FontSize="16"/>

                            <TextBlock Text="{Binding ProductQuantityInStock}" Margin="0,5,0,0"/>

                        </StackPanel>

                        <StackPanel  Grid.Row="1" Margin="10">
                       <Button Content="Редактировать" Name="RedakaMain" Click="RedakaMain_Click" Background="#0000cc" Foreground="White" Width="100" Height="20" />
                   </StackPanel>

               </Grid>
              
           </DataTemplate>
       
       </ListView.ItemTemplate>
   </ListView>
        <!--<DataGrid x:Name="productsListView"  AutoGenerateColumns="False"   SelectionMode="Single"  Grid.Row="3">
            <DataGrid.Columns>
               
                <DataGridTextColumn Header="Название" Binding="{Binding ProductName}" />
                <DataGridTextColumn Header="Описание" Binding="{Binding ProductDescription}" />
                <DataGridTextColumn Header="Остаток на складе" Binding="{Binding ProductManufacturer}" />
                <DataGridTextColumn Header="Изображение" Binding="{Binding Изображение}" Width="50"/>
                <DataGridTemplateColumn Width="auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Button Content="Ред." Name="RedakaMain" Click="RedakaMain_Click" Background="#0000cc" Width="60"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

            </DataGrid.Columns>
        </DataGrid>-->
     
        <Button x:Name="Add" Width="200" Grid.Row="4" Height="30" Content= "Добавить" HorizontalAlignment="Center" Click="Add_Click" FontFamily="Comic Sans MS" Background="#0000cc" Foreground="White"/>
        <Frame x:Name="Moder" />
    </Grid>
</Page>

PageModer.cs
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;

namespace IRPO
{
    /// <summary>
    /// Логика взаимодействия для PageModer.xaml
    /// </summary>
    public partial class PageModer : Page
    {
        private List<Products> products;
        string timeOfDay;
        public PageModer()
        {
            InitializeComponent();
            LoadManufacturers();
            LoadProducts();
          
            ApplyFilters();
            TB_Privet1.Text = (string)App.Current.Resources["TextTest"]; //ресурсы

            EventModer organizer = new EventModer(timeOfDay);
            organizer.GreetUser(TB_Privet);
        }

    
        string connectionString = @"Data Source = LAPTOP-9LSSTQJA;  Initial Catalog=Trade; Integrated Security=True;";

 

        private void LoadManufacturers()
        {
         
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
               
                string query = "SELECT DISTINCT ProductManufacturer FROM Product";
                SqlCommand command = new SqlCommand(query, connection);

                connection.Open();
                SqlDataReader reader = command.ExecuteReader();

                List<string> manufacturers = new List<string> { "Все производители" };
                while (reader.Read())
                {
                    string manufacturer = reader.GetString(0);
                    manufacturers.Add(manufacturer);
                }
                reader.Close();

                manufacturerComboBox.ItemsSource = manufacturers;
            }
        }

        private void LoadProducts()
        {
            products = new List<Products>();

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                string query = "SELECT ProductArticleNumber, ProductName, ProductDescription, ProductManufacturer, ProductCost, ProductQuantityInStock, Изображение FROM Product";
                SqlCommand command = new SqlCommand(query, connection);

                connection.Open();
                SqlDataReader reader = command.ExecuteReader();

                while (reader.Read())
                {
                    string article = reader.GetString(0);
                    string name = reader.GetString(1);
                    string description = reader.GetString(2);
                    string manufacturer = reader.GetString(3);
                    decimal price = reader.GetDecimal(4);
                    int QuantityInStock = reader.GetInt32(5);
                    string image = reader.GetString(6);

  


                    products.Add(new Products
                    {
                        ProductArticleNumber = article,
                        ProductName = name,
                        ProductDescription = description,
                        ProductManufacturer = manufacturer,
                        ProductCost = price,
                        ProductQuantityInStock = QuantityInStock,
                        Изображение = image


                    });

                }

                reader.Close();
            }


        }

    



        private void ApplyFilters()
        {
            IEnumerable<Products> filteredProducts = products;

            // Filter by manufacturer
            string selectedManufacturer = manufacturerComboBox.SelectedItem as string;
            if (selectedManufacturer != "Все производители")
            {
                filteredProducts = filteredProducts.Where(p => p.ProductManufacturer == selectedManufacturer);
                productsListView.ItemsSource = filteredProducts;

            }

            // Filter by search string
            string searchQuery = searchTextBox.Text.ToLower();
            if (!string.IsNullOrWhiteSpace(searchQuery))
            {

                filteredProducts = filteredProducts.Where(p =>
                    p.ProductName.ToLower().Contains(searchQuery) ||
                    p.ProductDescription.ToLower().Contains(searchQuery) ||
                    p.ProductManufacturer.ToLower().Contains(searchQuery));
            }

            // Sort by price
            if (sortByPriceCheckBox.IsChecked == true)
            {
                filteredProducts = filteredProducts.OrderBy(p => p.ProductCost);
            }
            else if (sortByPriceCheckBox.IsChecked == false)
            {
                filteredProducts = filteredProducts.OrderByDescending(p => p.ProductCost);
            }

            // Display filtered products
            productsListView.ItemsSource = filteredProducts;
        }

        private void manufacturerComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ApplyFilters();
        }

        private void searchTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            ApplyFilters();
        }

        private void sortByPriceCheckBox_Checked(object sender, RoutedEventArgs e)
        {
            ApplyFilters();
        }

        private void sortByPriceCheckBox_Unchecked(object sender, RoutedEventArgs e)
        {
            ApplyFilters();
        }

        private void RedakaMain_Click(object sender, RoutedEventArgs e)
        {

            Button button = sender as Button;
            Products selectedProduct = button.DataContext as Products;
            Moder.Content = new Eddit(selectedProduct);
            //Moder.Content = new Eddit((sender as Button).DataContext as Products);
        }

        private void Add_Click(object sender, RoutedEventArgs e)
        {
            Moder.Content = new Add();
        }

   
    }

    public class Products
    {
        public string ProductArticleNumber {  get; set; }
        public string ProductName { get; set; }
        public string ProductDescription { get; set; }
        public string ProductManufacturer { get; set; }
        public string ProductCategory { get; set; }
        public decimal ProductCost { get; set; }
        public int ProductQuantityInStock { get; set; }
        public string Изображение { get; set; }
        public int Discount { get; set; }



    }

 



}

