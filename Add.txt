<Page x:Class="IRPO.Add"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:IRPO"
      mc:Ignorable="d" 
      d:DesignHeight="500" d:DesignWidth="800"
      Background="White" Title="Add">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition Height="80"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="300"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <TextBox x:Name="imageAdd"  Width="300" Height="200"  />
        <StackPanel Grid.Column="1" Grid.RowSpan="2">

            <StackPanel Orientation="Horizontal" Margin="50,30,50,0" >
                <TextBlock Text="Артикул:"  FontSize="15" FontFamily="Comic Sans MS" Width="150"/>
                <TextBox x:Name="ArticleTextBox" Text="{Binding ProductArticleNumber}" Width="250" FontSize="15" FontFamily="Comic Sans MS" />
            </StackPanel>
            <Border
      Height="2"
      Background="#99ffff"
      Opacity="0.5"
      Margin="50,2,50,0"/>

            <StackPanel  Orientation="Horizontal" Margin="50,10,50,0">
                <TextBlock Text="Наименование:" FontSize="15" FontFamily="Comic Sans MS" Width="120"/>
                <TextBox x:Name="NameTextBox" Text="{Binding ProductName}" Width="280" FontSize="15" FontFamily="Comic Sans MS"/>
            </StackPanel>
            <Border
      Height="2"
      Background="#99ffff"
      Opacity="0.5"
      Margin="50,2,50,0"/>

            <StackPanel  Orientation="Horizontal" Margin="50,10,50,0" Height="100">
                <TextBlock Text="Описание:" FontSize="15" FontFamily="Comic Sans MS" Width="100"/>
                <TextBox x:Name="ProductDescriptionTextBox" Text="{Binding ProductDescription}" Width="300" FontSize="15" FontFamily="Comic Sans MS" />
            </StackPanel>
            <Border
      Height="2"
      Background="#99ffff"
      Opacity="0.5"
      Margin="50,2,50,0"/>

            <StackPanel  Orientation="Horizontal" Margin="50,10,50,0">
                <TextBlock Text="Категория:" FontSize="15" FontFamily="Comic Sans MS" Width="150"/>
                <ComboBox Name="categoryTextBox" Text="{Binding ProductCategory}" Width="250"/>

            </StackPanel>
            <Border
      Height="2"
      Background="#99ffff"
      Opacity="0.5"
      Margin="50,2,50,0"/>

            <StackPanel  Orientation="Horizontal" Margin="50,10,50,0">
                <TextBlock Text="Производитель:" FontSize="15" FontFamily="Comic Sans MS" Width="120"/>
                <TextBox x:Name="ManufTextBox" Text="{Binding ProductManufacturer}" Width="280" FontSize="15" FontFamily="Comic Sans MS"/>
            </StackPanel>

            <Border
       Height="2"
       Background="#99ffff"
       Opacity="0.5"
       Margin="50,2,50,0"/>
            <StackPanel  Orientation="Horizontal" Margin="50,10,50,0">
                <TextBlock Text="Цена:" FontSize="15" FontFamily="Comic Sans MS" Width="150"/>
                <TextBox x:Name="CostTextBox" Text="{Binding ProductCost}" Width="250" FontSize="15" FontFamily="Comic Sans MS"/>
            </StackPanel>
            <StackPanel  Orientation="Horizontal" Margin="50,10,50,0">
                <TextBlock Text="Остаток на складе:" FontSize="15" FontFamily="Comic Sans MS" Width="150"/>
                <TextBox x:Name="QuantityTextBox" Text="{Binding ProductQuantityInStock}" Width="250" FontSize="15" FontFamily="Comic Sans MS"/>
            </StackPanel>
            <StackPanel  Orientation="Horizontal" Margin="50,10,50,0">
                <TextBlock Text="Скидка:" FontSize="15" FontFamily="Comic Sans MS" Width="150"/>
                <TextBox x:Name="DiscountTextBox" Text="{Binding ProductDiscountAmount}" Width="250" FontSize="15" FontFamily="Comic Sans MS"/>
            </StackPanel>

            <Border
          Height="2"
          Background="#99ffff"
          Opacity="0.5"
          Margin="50,2,50,0"/>


        </StackPanel>
        <Button x:Name="AddImage" Content="Добавить изображение" Click="AddImage_Click"  Grid.Row="1" Width="200" Height="30" FontFamily="Comic Sans MS" Background="#0000cc" Foreground="White"/>
        <Button x:Name="AddProd" Content="Добавить" Click="AddProd_Click" Grid.Column="1" Grid.Row="1" Width="200" Height="30" FontFamily="Comic Sans MS" Background="#0000cc" Foreground="White"/>
    </Grid>
</Page>

Add.cs
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Path = System.IO.Path;

namespace IRPO
{
    /// <summary>
    /// Логика взаимодействия для Add.xaml
    /// </summary>
    public partial class Add : Page
    {
        string connectionString = @"Data Source = LAPTOP-9LSSTQJA;  Initial Catalog=Trade; Integrated Security=True;";
        private List<Products> categories;
        public Add()
        {
            InitializeComponent();
            LoadCategories();
        }

        private void LoadCategories()
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {

                string query = "SELECT DISTINCT ProductCategory FROM Product";
                SqlCommand command = new SqlCommand(query, connection);

                connection.Open();
                SqlDataReader reader = command.ExecuteReader();

                List<string> manufacturers = new List<string> { "Все производители " };
                while (reader.Read())
                {
                    string manufacturer = reader.GetString(0);
                    manufacturers.Add(manufacturer);
                }
                reader.Close();

                categoryTextBox.ItemsSource = manufacturers;
            }


        }

        private void AddProd_Click(object sender, RoutedEventArgs e)
        {
            // Получение введенных пользователем данных
            string article = ArticleTextBox.Text;
            string name = NameTextBox.Text;
            string description = ProductDescriptionTextBox.Text;
            string category = categoryTextBox.SelectedItem as string;
            string manufacturer = ManufTextBox.Text;
            decimal cost = decimal.Parse(CostTextBox.Text);
            int quantityInStock = int.Parse(QuantityTextBox.Text);
            int Discount = int.Parse(DiscountTextBox.Text);
            string image = imageAdd.Text;

            // Вставка данных в базу данных
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                string query = "INSERT INTO Product (ProductArticleNumber, ProductName, ProductDescription, ProductManufacturer,ProductCategory, ProductCost, ProductQuantityInStock,ProductDiscountAmount,Изображение) " +
                               "VALUES (@Article, @Name, @Description, @Manufacturer,@Category, @Cost, @Quantity,@DiscountAmount,@image)";

                SqlCommand command = new SqlCommand(query, connection);
                command.Parameters.AddWithValue("@Article", article);
                command.Parameters.AddWithValue("@Name", name);
                command.Parameters.AddWithValue("@Description", description);
                command.Parameters.AddWithValue("@Manufacturer", manufacturer);
                command.Parameters.AddWithValue("@Category", category);
                command.Parameters.AddWithValue("@Cost", cost);
                command.Parameters.AddWithValue("@Quantity", quantityInStock);
                command.Parameters.AddWithValue("@DiscountAmount", Discount);
                command.Parameters.AddWithValue("@image", image);
                connection.Open();
                command.ExecuteNonQuery();
            }

            // Перейти обратно на страницу модератора после добавления данных
            NavigationService.GoBack();
        }

        private void AddImage_Click(object sender, RoutedEventArgs e)
        {
           // Создание диалогового окна выбора файла
    OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "Файлы изображений (*.png, *.jpg, *.jpeg)|*.png;*.jpg;*.jpeg";

            // Проверка, был ли выбран файл
            if (openFileDialog.ShowDialog() == true)
            {
                // Получение пути к выбранному изображению
                string imagePath = openFileDialog.FileName;

                // Проверка существования папки "Images"
                string imagesFolderPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Photo");
                if (!Directory.Exists(imagesFolderPath))
                {
                    Directory.CreateDirectory(imagesFolderPath);
                }

                // Создание нового пути для сохранения изображения в папке приложения
                string destinationPath = Path.Combine(imagesFolderPath, Path.GetFileName(imagePath));

                // Копирование выбранного изображения в папку приложения
                File.Copy(imagePath, destinationPath, true);

                // Отображение сообщения об успешном сохранении
                MessageBox.Show("Изображение успешно сохранено!");

            }


        }
    }
    
    
}
