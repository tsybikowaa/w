<Page x:Class="IRPO.Eddit"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:IRPO"
      mc:Ignorable="d" 
      d:DesignHeight="500" d:DesignWidth="800"
      Title="Eddit" Background="White">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition Height="80"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="300"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        
        <Image x:Name="imageEddit"  Width="300" Height="200"  />
        <StackPanel Grid.Column="1" Grid.RowSpan="2">

            <StackPanel Orientation="Horizontal" Margin="50,30,50,0" >
                <TextBlock Text="Артикул:"  FontSize="15" FontFamily="Comic Sans MS" Width="100"/>
                <TextBox x:Name="TB_Article" Text="{Binding ProductArticleNumber}" Width="300" FontSize="15" FontFamily="Comic Sans MS" IsReadOnly="True"/>
            </StackPanel>
            <Border
             Height="2"
             Background="#99ffff"
             Opacity="0.5"
             Margin="50,2,50,0"/>

            <StackPanel  Orientation="Horizontal" Margin="50,10,50,0">
                <TextBlock Text="Наименование:" FontSize="15" FontFamily="Comic Sans MS" Width="120"/>
                <TextBox x:Name="TB_Name" Text="{Binding ProductName}" Width="280" FontSize="15" FontFamily="Comic Sans MS"/>
            </StackPanel>
            <Border
             Height="2"
             Background="#99ffff"
             Opacity="0.5"
             Margin="50,2,50,0"/>

            <StackPanel  Orientation="Horizontal" Margin="50,10,50,0" Height="100">
                <TextBlock Text="Описание:" FontSize="15" FontFamily="Comic Sans MS" Width="100"/>
                <TextBox x:Name="TB_ProductDescription" Text="{Binding ProductDescription}" Width="300" FontSize="15" FontFamily="Comic Sans MS" />
            </StackPanel>
            <Border
             Height="2"
             Background="#99ffff"
             Opacity="0.5"
             Margin="50,2,50,0"/>

            <StackPanel  Orientation="Horizontal" Margin="50,10,50,0">
                <TextBlock Text="Категория:" FontSize="15" FontFamily="Comic Sans MS" Width="100"/>
                <ComboBox Name="CB_category" Text="{Binding ProductCategory}" Width="200"/>

            </StackPanel>
            <Border
             Height="2"
             Background="#99ffff"
             Opacity="0.5"
             Margin="50,2,50,0"/>

            <StackPanel  Orientation="Horizontal" Margin="50,10,50,0">
                <TextBlock Text="Производитель:" FontSize="15" FontFamily="Comic Sans MS" Width="120"/>
                <TextBox x:Name="TB_Manuf" Text="{Binding ProductManufacturer}" Width="280" FontSize="15" FontFamily="Comic Sans MS"/>
            </StackPanel>

            <Border
              Height="2"
              Background="#99ffff"
              Opacity="0.5"
              Margin="50,2,50,0"/>
            <StackPanel  Orientation="Horizontal" Margin="50,10,50,0">
                <TextBlock Text="Цена:" FontSize="15" FontFamily="Comic Sans MS" Width="100"/>
                <TextBox x:Name="TB_Cost" Text="{Binding ProductCost}" Width="300" FontSize="15" FontFamily="Comic Sans MS"/>
            </StackPanel>
            <StackPanel  Orientation="Horizontal" Margin="50,10,50,0">
                <TextBlock Text="Остаток на складе:" FontSize="15" FontFamily="Comic Sans MS" Width="150"/>
                <TextBox x:Name="TB_Quantity" Text="{Binding ProductQuantityInStock}" Width="250" FontSize="15" FontFamily="Comic Sans MS"/>
            </StackPanel>

            <Border
                 Height="2"
                 Background="#99ffff"
                 Opacity="0.5"
                 Margin="50,2,50,0"/>
            

        </StackPanel>
        <Button x:Name="EdditImage" Width="200" Content= "Изменить изображение" Height="30" Click="EdditImage_Click" FontFamily="Comic Sans MS" Background="#0000cc" Foreground="White" Grid.Row="1" />
        <Button x:Name="Save" Grid.Column="1" Width="200" Content= "Сохранить" HorizontalAlignment="Left" Height="30" Click="Save_Click" FontFamily="Comic Sans MS" Background="#0000cc" Foreground="White" Grid.Row="1"/>
        <Button x:Name="BackEddit" Grid.Column="1" Width="200" Content= "Назад" HorizontalAlignment="Right"  Height="30" Click="BackEddit_Click" FontFamily="Comic Sans MS" Background="#0000cc" Foreground="White" Grid.Row="1"/>
        <Frame x:Name="EdditFrame"/>
    </Grid>
</Page>

Eddit.cs
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace IRPO
{
    /// <summary>
    /// Логика взаимодействия для Eddit.xaml
    /// </summary>
    public partial class Eddit : Page
    {
    
        private Products selectedProduct;

        string connectionString = @"Data Source = LAPTOP-9LSSTQJA;  Initial Catalog=Trade; Integrated Security=True;";
    

        public Eddit(Products product)
        {
            InitializeComponent();
     
            selectedProduct = product;
         
            if (selectedProduct != null)
            {
               
                LoadProductData();
            }
        



        }
        private void LoadProductData()
        {
            // Заполнение полей формы данными товара
            TB_Article.Text = selectedProduct.ProductArticleNumber;
            TB_Name.Text = selectedProduct.ProductName;
            TB_ProductDescription.Text = selectedProduct.ProductDescription;
           
            TB_Manuf.Text = selectedProduct.ProductManufacturer;
            TB_Quantity.Text = selectedProduct.ProductQuantityInStock.ToString();
            TB_Cost.Text = selectedProduct.ProductCost.ToString();
            if (!string.IsNullOrEmpty(selectedProduct.Изображение))
            {
                BitmapImage bitmapImage = new BitmapImage(new Uri(selectedProduct.Изображение, UriKind.RelativeOrAbsolute));

      
                try
                {
                    var bitmap = new BitmapImage();
                    bitmap.BeginInit();
                    bitmap.CacheOption = BitmapCacheOption.OnLoad;
                    bitmap.CreateOptions = BitmapCreateOptions.IgnoreImageCache;
                    bitmap.UriSource = new Uri(selectedProduct.Изображение);
                    bitmap.EndInit();
                    imageEddit.Source = bitmap;
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Ошибка загрузки изображения: " + ex.Message);
                }

            }
        }


        private string SaveImage(BitmapImage image)
        {
            // Сохранение изображения в папке приложения
            var imageName = Guid.NewGuid().ToString() + ".jpg";
            var imagePath = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, imageName);

            using (var fileStream = new FileStream(imagePath, FileMode.Create))
            {
                var encoder = new JpegBitmapEncoder();
                encoder.Frames.Add(BitmapFrame.Create(image));
                encoder.Save(fileStream);
            }

            return imagePath;
        }
        private void EdditImage_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "Image files (*.jpg, *.jpeg, *.png) | *.jpg; *.jpeg; *.png";

            if (openFileDialog.ShowDialog() == true)
            {
                string imagePath = openFileDialog.FileName;

                // Ограничение размера изображения
                BitmapImage bitmap = new BitmapImage(new Uri(imagePath));
                if (bitmap.PixelWidth > 300 || bitmap.PixelHeight > 200)
                {
                    MessageBox.Show("Выбранное изображение превышает допустимый размер (300x200 пикселей).", "Ошибка");
                    imagePath = null;
                }
                else
                {
                    imageEddit.Source = bitmap;
                }

                // Проверка размеров изображения
                if (bitmap.PixelWidth > 300 || bitmap.PixelHeight > 200)
                {
                    // Масштабирование изображения
                    double scaleFactor = Math.Min(300.0 / bitmap.PixelWidth, 200.0 / bitmap.PixelHeight);
                    TransformedBitmap transformedBitmap = new TransformedBitmap(bitmap, new ScaleTransform(scaleFactor, scaleFactor));

                    imageEddit.Source = transformedBitmap;
                }
                else
                {
                    imageEddit.Source = bitmap;
                }
            }



    }

         
        

        private void BackEddit_Click(object sender, RoutedEventArgs e)
        {
            EdditFrame.Content = new PageModer();
        }

        private void Save_Click(object sender, RoutedEventArgs e)
        {
            // Валидация введенных данных
            if (!ValidateData())
            {
                return;
            }

            // Сохранение изменений в базе данных
            using (var context = new TradeEntities())
            {
                var product = context.Product.FirstOrDefault(p => p.ProductArticleNumber == selectedProduct.ProductArticleNumber);
                if (product != null)
                {
                    product.ProductName = TB_Name.Text;
                    product.ProductCategory = CB_category.Text;
                    product.ProductQuantityInStock = int.Parse(TB_Quantity.Text);
                    product.ProductCost = decimal.Parse(TB_Cost.Text);
                    product.ProductDescription = TB_ProductDescription.Text;
                    product.ProductManufacturer = TB_Manuf.Text;

                    // Сохранение изображения
                    if (imageEddit.Source != null && imageEddit.Source is BitmapImage)
                    {
                        var imageBytes = SaveImage((BitmapImage)imageEddit.Source);
                        product.Изображение = imageBytes;
                    }

                    context.SaveChanges();
                }
            }


        }
       
        private bool ValidateData()
        {
            // Валидация введенных данных
            if (string.IsNullOrEmpty(TB_Name.Text) || string.IsNullOrEmpty((string)CB_category.SelectedItem) ||
                string.IsNullOrEmpty(TB_Quantity.Text) || string.IsNullOrEmpty(TB_Cost.Text))
            {
                MessageBox.Show("Введите все обязательные поля.");
                return false;
            }

            if (!int.TryParse(TB_Quantity.Text, out var quantity) || quantity < 0)
            {
                MessageBox.Show("Некорректное значение количества.");
                return false;
            }

            if (!decimal.TryParse(TB_Cost.Text, out var price) || price < 0)
            {
                MessageBox.Show("Некорректное значение стоимости.");
                return false;
            }

            return true;
        }
    }
  


   

}


